// Code generated by mockery v2.38.0. DO NOT EDIT.

package contracts

import mock "github.com/stretchr/testify/mock"

// MockAuthRepository is an autogenerated mock type for the AuthRepository type
type MockAuthRepository struct {
	mock.Mock
}

type MockAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepository) EXPECT() *MockAuthRepository_Expecter {
	return &MockAuthRepository_Expecter{mock: &_m.Mock}
}

// GetItems provides a mock function with given fields:
func (_m *MockAuthRepository) GetItems() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetItems")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepository_GetItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItems'
type MockAuthRepository_GetItems_Call struct {
	*mock.Call
}

// GetItems is a helper method to define mock.On call
func (_e *MockAuthRepository_Expecter) GetItems() *MockAuthRepository_GetItems_Call {
	return &MockAuthRepository_GetItems_Call{Call: _e.mock.On("GetItems")}
}

func (_c *MockAuthRepository_GetItems_Call) Run(run func()) *MockAuthRepository_GetItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthRepository_GetItems_Call) Return(_a0 []string, _a1 error) *MockAuthRepository_GetItems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepository_GetItems_Call) RunAndReturn(run func() ([]string, error)) *MockAuthRepository_GetItems_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthRepository creates a new instance of MockAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepository {
	mock := &MockAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
